package training.iqgateway.controller;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;

import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import training.iqgateway.model.DocumentsEO;
import training.iqgateway.service.DocumentService;

@RestController
@RequestMapping("/documents")
@CrossOrigin(origins = "http://localhost:5173")
public class DocumentController {

    @Autowired
    private DocumentService docSer;

    private static final Logger log = LoggerFactory.getLogger(DocumentController.class);

    @GetMapping("/getAll")
    public ResponseEntity<List<DocumentsEO>> getAllDocs() {
        List<DocumentsEO> docs = docSer.findAll();
        if (docs.isEmpty()) {
            log.info("No documents found");
            return ResponseEntity.noContent().build();
        }
        log.info("Returning {} documents", docs.size());
        return ResponseEntity.ok(docs);
    }

    @GetMapping("/{_id}")
    public ResponseEntity<DocumentsEO> getById(@PathVariable Integer _id) {
        return docSer.findById(_id)
                .map(doc -> {
                    log.info("Found document with id {}", _id);
                    return ResponseEntity.ok(doc);
                })
                .orElseGet(() -> {
                    log.warn("No document found with id {}", _id);
                    return ResponseEntity.notFound().build();
                });
    }

//    @PostMapping("/upload")
//    public ResponseEntity<DocumentsEO> createDocument(@RequestBody DocumentsEO docs) {
//        log.info("Received document for upload: {}", docs);
//
//        if (docs.getId() != null) {
//            log.warn("Document upload request has pre-set ID: {}, rejecting", docs.getId());
//            return ResponseEntity.badRequest().build();
//        }
//
//        Integer maxId = docSer.findMaxId().orElse(0);
//        docs.setId(maxId + 1);
//
//        DocumentsEO saved = docSer.save(docs);
//
//        log.info("Saved document with generated id: {}", saved.getId());
//        return ResponseEntity.status(HttpStatus.CREATED).body(saved);
//    }
    
    
    @PostMapping("/upload")
    public ResponseEntity<DocumentsEO> createDocument(@RequestBody DocumentsDTO docsDTO) {

        log.info("Received document DTO for upload: {}", docsDTO);

        if (docsDTO.getId() != null) {
            log.warn("Document upload request has pre-set ID: {}, rejecting", docsDTO.getId());
            return ResponseEntity.badRequest().build();
        }

        // Convert DTO to EO
        DocumentsEO docsEO = convertDtoToEntity(docsDTO);

        // Generate new ID
        Integer maxId = docSer.findMaxId().orElse(0);
        docsEO.setId(maxId + 1);

        DocumentsEO saved = docSer.save(docsEO);

        log.info("Saved document with generated id: {}", saved.getId());

        return ResponseEntity.status(HttpStatus.CREATED).body(saved);
    }

    // Utility method to convert DTO to entity
    private DocumentsEO convertDtoToEntity(DocumentsDTO dto) {
        DocumentsEO entity = new DocumentsEO();
        entity.setId(dto.getId()); // likely null
        entity.setClaimId(dto.getClaimId());
        entity.setBloodTest(dto.getBloodTest());
        entity.setAdmissionNote(dto.getAdmissionNote());
        entity.setPrescription(dto.getPrescription());
        entity.setXrayReport(dto.getXrayReport());
        entity.setInsuranceForm(dto.getInsuranceForm());
        entity.setDischargeSummary(dto.getDischargeSummary());
        entity.setOther(dto.getOther());
        entity.setLastUpdated(dto.getLastUpdated());
        entity.setVerifiedBy(dto.getVerifiedBy());
        return entity;
    }


    @PutMapping("/{_id}")
    public ResponseEntity<DocumentsEO> updateDocument(@PathVariable Integer _id, @RequestBody DocumentsEO doc) {
        return docSer.update(_id, doc)
                .map(updatedDoc -> {
                    log.info("Updated document id {}", _id);
                    return ResponseEntity.ok(updatedDoc);
                })
                .orElseGet(() -> {
                    log.warn("No document found to update for id {}", _id);
                    return ResponseEntity.notFound().build();
                });
    }

    @DeleteMapping("/delete/{_id}")
    public ResponseEntity<Void> deleteDocument(@PathVariable Integer _id) {
        if (docSer.findById(_id).isEmpty()) {
            log.warn("No document found to delete for id {}", _id);
            return ResponseEntity.notFound().build();
        }
        docSer.DeleteById(_id);
        log.info("Deleted document with id {}", _id);
        return ResponseEntity.noContent().build();
    }

    // Get all documents by Claim ID
    @GetMapping("/claims/{claimId}")
    public ResponseEntity<List<DocumentsEO>> getDocumentsByClaimId(@PathVariable Integer claimId) {
        List<DocumentsEO> docs = docSer.findByClaimId(claimId);
        if (docs.isEmpty()) {
            log.info("No documents found with claimId {}", claimId);
            return ResponseEntity.noContent().build();
        }
        log.info("Found {} documents for claimId {}", docs.size(), claimId);
        return ResponseEntity.ok(docs);
    }
}
